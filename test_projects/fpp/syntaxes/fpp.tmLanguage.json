{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "FPP",
	"patterns": [
		{"include": "#comments"},
		{"include": "#tripleStrings"},
		{"include": "#doubleStrings"},
		{"include": "#numbers"},
		{"include": "#operators"},
		{"include": "#reserved-words"}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"begin": "\\#",
					"end": "\\n",
					"name": "comment.line.number-sign.fpp"
				},
				{
					"begin": "\\@",
					"end": "\\n",
					"name": "comment.line.at-sign.fpp"
				}	
			]
		},
		"tripleStrings": {
			"name": "string.quoted.triple.fpp",
			"begin": "\"\"\"",
			"end": "\"\"\"",
			"contentName": "string.quoted.triple.block.fpp",
			"patterns": [{ "include": "#string-escape-sequences" }]
		},
		"doubleStrings": {
			"name": "string.quoted.double.fpp",
			"begin": "\"",
			"while": "^\n",
			"end": "\"",
			"contentName": "string.quoted.double.block.fpp",
			"patterns": [{ "include": "#string-escape-sequences" }]
		},
		"string-escape-sequences": {
			"patterns": [{
				"name": "constant.character.escape.fpp",
				"match": "\\\\."
			}]
		},
		"numbers": {
			"patterns": [{
				"name": "constant.numeric.integer.decimal.fpp",
				"match": "\\b(0|[1-9][0-9]*[l|L]?)\\b"
			}, 
			{
				"name": "constant.numeric.integer.hex.fpp",
				"match": "\\b(0[xX][0-9a-fA-F]{1,16})\\b"
			},
			{
				"name": "constant.numeric.floatingPoint.fpp",
				"match": "\\b(([0-9]+.[0-9]*)|(.[0-9]+))([eE][+-]?[0-9]+)?[fF]?\\b"
			},
			{
				"name": "constant.numeric.floatingPoint.fpp",
				"match": "\\b(([0-9]+.[0-9]*)|(.[0-9]+))([eE][+-]?[0-9]+)?[fF]?\\b"
			}]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.fpp",
					"match": "=|\\+|-|\\*|/|%"
				},
				{
					"name": "keyword.operator.compound.fpp",
					"match": "\\+=|-=|\\*=|/=|%="
				},
				{
					"name": "keyword.operator.logical.fpp",
					"match": "&&|\\||!"
				}
			]
		},
		"reserved-words": {
			"patterns": [
				{
					"name": "constant.language.boolean.fpp",
					"match": "\\b(?<![$])(true|false)\\b"
				},
				{
					"name": "storage.type.identifiers.fpp",
					"match": "\\b(?<![$])(string|bool)\\b"
				},
				{
					"name": "storage.type.integer.unsigned.fpp",
					"match": "\\b(?<![$])(U16|U32|U64|U8)\\b"
				},
				{
					"name": "storage.type.integer.signed.fpp",
					"match": "\\b(?<![$])(I16|I32|I64|I8)\\b"
				},
				{
					"name": "storage.type.floatingPoint.fpp",
					"match": "\\b(?<![$])(F32|F64)\\b"
				},
				{
					"name": "storage.type.support.single.standard.fpp",
					"match": "\\b(?<![$])(type|instance)\\b"
				},
				{
					"name": "storage.type.support.single.special.fpp",
					"match": "\\b(?<![$])(id|opcode|port|command|phase)\\b"
				},
				{
					"name": "storage.type.support.muliple.fpp",
					"match": "\\b(?<![$])(array|queue|stack)\\b"
				},
				{
					"name": "storage.type.support.declarative.standard.fpp",
					"match": "\\b(?<![$])(enum|struct)\\b"
				},
				{
					"name": "storage.type.support.declarative.special.fpp",
					"match": "\\b(?<![$])(topology|param|module|component|connections)\\b"
				},
				{
					"name": "keyword.telemetry-channel.limit.fpp",
					"match": "\\b(?<![$])(orange|yellow|red)\\b"
				},
				{
					"name": "keyword.statement.expression.fpp",
					"match": "\\b(?<![$])(match|throttle|cpu)\\b"
				},
				{
					"name": "keyword.statement.argument.fpp",
					"match": "\\b(?<![$])(severity|format)\\b"
				},
				{
					"name": "keyword.event.severity.specifier.fpp",
					"match": "\\b(?<![$])(activity|warning|diagnostic|fatal)\\b"
				},
				{
					"name": "keyword.port.instance.type",
					"match": "\\b(?<![$])(serial)\\b"
				},
				{
					"name": "keyword.port.general",
					"match": "\\b(?<![$])(async|guarded|sync)\\b"
				},
				{
					"name": "keyword.port.special",
					"match": "\\b(?<![$])(command|event|param|telemetry|text|time)\\b"
				},
				{
					"name": "keyword.queue.behavior",
					"match": "\\b(?<![$])(assert|block|drop)\\b"
				},
				{
					"name": "keyword.connectors.access.fpp",
					"match": "\\b(?<![$])(at|get|set|save)\\b"
				},
				{
					"name": "keyword.connectors.event.fpp",
					"match": "\\b(?<![$])(update|always|change)\\b"
				},
				{
					"name": "keyword.connectors.other.fpp",
					"match": "\\b(?<![$])(on|with|size)\\b"
				},
				{
					"name": "keyword.external.fpp",
					"match": "\\b(?<![$])(import|include)\\b"
				},
				{
					"name": "keyword.adjectives.after.severity.fpp",
					"match": "\\b(?<![$])(high|low)\\b"
				},
				{
					"name": "keyword.adjectives.after.port.general.fpp",
					"match": "\\b(?<![$])(input|output)\\b"
				},
				{
					"name": "keyword.adjectives.after.port.special.fpp",
					"match": "\\b(?<![$])(recv|reg|resp)\\b"
				},
				{
					"name": "keyword.adjectives.before.instance.fpp",
					"match": "\\b(?<![$])(base|internal|priority|ref|default|locate)\\b"
				},
				{
					"name": "keyword.adjectives.before.storage.fpp",
					"match": "\\b(?<![$])(constant|private)\\b"
				},
				{
					"name": "keyword.adjectives.component.fpp",
					"match": "\\b(?<![$])(health|active|passive|queued)\\b"
				}
			]
		}
	},
	"scopeName": "source.fpp"
}